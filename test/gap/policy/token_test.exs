defmodule Gap.Policy.TokenTest do
  use ExUnit.Case, async: true

  alias Gap.Policy.Token

  describe "create_user_token/0 and user_token?/1 black-box behavior" do
    test "create_user_token produces a valid token string" do
      token = Token.create_user_token()

      assert is_binary(token)
      assert String.contains?(token, ":")
      # Just check token length reasonable (min length > 20 to avoid empty tokens)
      assert byte_size(token) > 20
    end

    test "user_token? returns true for token generated by create_token" do
      token = Token.create_user_token()
      assert Token.user_token?(token)
    end

    test "user_token? returns false for invalid tokens" do
      assert Token.user_token?("") == false
      assert Token.user_token?("randomstring") == false
      assert Token.user_token?("something:wrongformat") == false
      assert Token.user_token?("prefix:12345") == false
    end
  end

  describe "create_group_token/0 and group_token?/1 black-box behavior" do
    test "create_group_token produces a valid token string" do
      token = Token.create_group_token()

      assert is_binary(token)
      assert String.contains?(token, ":")
      # Just check token length reasonable (min length > 20 to avoid empty tokens)
      assert byte_size(token) > 20
    end

    test "group_token? returns true for token generated by create_group_token" do
      token = Token.create_group_token()
      assert Token.group_token?(token)
    end

    test "group_token? returns false for invalid tokens" do
      assert Token.group_token?("") == false
      assert Token.group_token?("randomstring") == false
      assert Token.group_token?("something:wrongformat") == false
      assert Token.group_token?("prefix:12345") == false
    end
  end
end
